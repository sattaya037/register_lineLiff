window.onload = function() {
    const useNodeJS = true;   // if you are not using a node server, set this value to false
    const defaultLiffId = "1553436015-g2jwRx3G";   // change the default LIFF value if you are not using a node server

    // DO NOT CHANGE THIS
    let myLiffId = "";

    // if node is used, fetch the environment variable and pass it to the LIFF method
    // otherwise, pass defaultLiffId
    if (useNodeJS) {
        fetch('/send-id')
            .then(function(reqResponse) {
                return reqResponse.json();
            })
            .then(function(jsonResponse) {
                myLiffId = jsonResponse.id;
                initializeLiffOrDie(myLiffId);
            })
            .catch(function(error) {
                document.getElementById("liffAppContent").classList.add('invisible');
                document.getElementById("nodeLiffIdErrorMessage").classList.remove('invisible');
            });
    } else {
        myLiffId = defaultLiffId;
        initializeLiffOrDie(myLiffId);
    }
};

/**
* Check if myLiffId is null. If null do not initiate liff.
* @param {string} myLiffId The LIFF ID of the selected element
*/
function initializeLiffOrDie(myLiffId) {
    if (!myLiffId) {
        document.getElementById("liffAppContent").classList.add('invisible');
        document.getElementById("liffIdErrorMessage").classList.remove('invisible');
    } else {
        initializeLiff(myLiffId);
    }
}

/**
* Initialize LIFF
* @param {string} myLiffId The LIFF ID of the selected element
*/
function initializeLiff(myLiffId) {
    liff
        .init({
            liffId: myLiffId
        })
        .then(() => {
            // start to use LIFF's api
            initializeApp();
        })
        .catch((err) => {
            document.getElementById("liffAppContent").classList.add('invisible');
            document.getElementById("liffInitErrorMessage").classList.remove('invisible');
        });
}

/**
 * Initialize the app by calling functions handling individual app components
 */
function initializeApp() {
    // displayLiffData();
    liff.getProfile()
    .then(profile => {
        document.getElementById('liffLoginButton').classList.toggle('invisible');
        document.getElementById('liffLogoutButton').classList.toggle('invisible');
        document.getElementById('displaynamefield').innerHTML=profile.displayName;
        document.getElementById("image").src=profile.pictureUrl; 
        
    })
    .catch((err) => {
      console.log('error', err);
      registerButtonHandlers();

    });
    registerButtonHandlers();

    // check if the user is logged in/out, and disable inappropriate button
    if (liff.isLoggedIn()) {
        document.getElementById('liffLoginButton').disabled = true;
    } else {
        document.getElementById('liffLogoutButton').disabled = true;
    }
}

/**
* Display data generated by invoking LIFF methods
*/
/**
* Toggle the login/logout buttons based on the isInClient status, and display a message accordingly
*/
function displayIsInClientInfo() {
    if (liff.isInClient()) { 
        // document.getElementById('isInClientMessage').textContent = 'You are opening the app in the in-app browser of LINE.';
    } else {
        // document.getElementById('isInClientMessage').textContent = 'You are opening the app in an external browser.';
    }
}

/**
* Register event handlers for the buttons displayed in the app
*/
function registerButtonHandlers() {

    // get profile call


    // login call, only when external browser is used
    document.getElementById('liffLoginButton').addEventListener('click', function() {
        if (!liff.isLoggedIn()) {
            // set `redirectUri` to redirect the user to a URL other than the front page of your LIFF app.
            liff.login();
        }
    });

    // logout call only when external browse
    document.getElementById('liffLogoutButton').addEventListener('click', function() {
        if (liff.isLoggedIn()) {
            liff.logout();
            window.location.reload();
        }
    });
}

/**
* Alert the user if LIFF is opened in an external browser and unavailable buttons are tapped
*/
function sendAlertIfNotInClient() {
    alert('This button is unavailable as LIFF is currently being opened in an external browser.');
}
function register(){
    liff.getProfile()
    .then(profile => {
        pushFirebase(profile)        
    })
}

function pushFirebase(profile){
    var firebaseConfig = {
        apiKey: "AIzaSyCHQ4DM7_CqftwNk8hwM6AHTzXoT543n4g",
        authDomain: "match-699cf.firebaseapp.com",
        databaseURL: "https://match-699cf.firebaseio.com",
        projectId: "match-699cf",
        storageBucket: "match-699cf.appspot.com",
        messagingSenderId: "496105033351",
        appId: "1:496105033351:web:ddc576483480e68e10f222",
        measurementId: "G-XX1B260S6W"
      };
      // Initialize Firebase
      firebase.initializeApp(firebaseConfig);
      firebase.analytics();
      var lineID =profile.userId;
      var lineName =profile.displayName;
      var Fullname = document.getElementById("getfullName").value;
      const dbRef = firebase.database().ref('HPY');
      console.log(dbRef)
      if(Fullname){
        dbRef.orderByKey().equalTo(lineID).once("value", function (snapshot) {
            if(snapshot.val()==null){
                const usersRef = dbRef.child(lineID);
                usersRef.set({
                    lineName : lineName,
                    Fullname : Fullname,
                    match : 0
                  });
                  alert(' You have successfully registered.');
                  liff.closeWindow();
    
            }else{
                alert('You are already registered.');
                liff.closeWindow();
    
            }
    
          })
      }else{
        alert('Please specify your full name.');
      }
}   

function toggleProfileData() {
    toggleElement('profileInfo');
}

function toggleElement(elementId) {
    const elem = document.getElementById(elementId);
    if (elem.offsetWidth > 0 && elem.offsetHeight > 0) {
        elem.style.display = 'none';
    } else {
        elem.style.display = 'block';
    }
}